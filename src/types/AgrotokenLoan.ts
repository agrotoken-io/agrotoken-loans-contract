/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AgrotokenLoanInterface extends utils.Interface {
  functions: {
    "DECIMAL_FACTOR()": FunctionFragment;
    "acceptLoan(bytes32)": FunctionFragment;
    "activateLoan(bytes32,uint256)": FunctionFragment;
    "allowedTokens(address)": FunctionFragment;
    "cancelLoan(bytes32)": FunctionFragment;
    "computeBaseInterest(bytes32,uint256)": FunctionFragment;
    "computeEarlyInterest(bytes32,uint256)": FunctionFragment;
    "createLoan(bytes32,address,address,uint256,uint8,uint8,uint256,uint256,uint8,uint8)": FunctionFragment;
    "executeDueLoan(bytes32,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paidInFiat(bytes32)": FunctionFragment;
    "paidInToken(bytes32,uint256,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllowedToken(address,bool)": FunctionFragment;
    "verifyPriceSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DECIMAL_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activateLoan",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeBaseInterest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeEarlyInterest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDueLoan",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paidInFiat",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paidInToken",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPriceSignature",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeBaseInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeEarlyInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeDueLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paidInFiat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paidInToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPriceSignature",
    data: BytesLike
  ): Result;

  events: {
    "LoanStatusUpdate(bytes32,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanStatusUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LoanStatusUpdateEvent = TypedEvent<
  [string, number],
  { loanHash: string; status: number }
>;

export type LoanStatusUpdateEventFilter =
  TypedEventFilter<LoanStatusUpdateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AgrotokenLoan extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgrotokenLoanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptLoan(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateLoan(
      hash: BytesLike,
      activatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    cancelLoan(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeBaseInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeEarlyInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createLoan(
      hash: BytesLike,
      collateral_: string,
      beneficiary_: string,
      dueSeconds_: BigNumberish,
      interest_: BigNumberish,
      earlyInterest_: BigNumberish,
      fiatTotal_: BigNumberish,
      tokenTotal_: BigNumberish,
      localCurrency_: BigNumberish,
      liquidationLimitPercentage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeDueLoan(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paidInFiat(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paidInToken(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      priceExpiry: BigNumberish,
      bankSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyPriceSignature(
      signer: string,
      price: BigNumberish,
      validUntil: BigNumberish,
      timestamp: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DECIMAL_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptLoan(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateLoan(
    hash: BytesLike,
    activatedAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cancelLoan(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeBaseInterest(
    hash: BytesLike,
    atTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeEarlyInterest(
    hash: BytesLike,
    atTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createLoan(
    hash: BytesLike,
    collateral_: string,
    beneficiary_: string,
    dueSeconds_: BigNumberish,
    interest_: BigNumberish,
    earlyInterest_: BigNumberish,
    fiatTotal_: BigNumberish,
    tokenTotal_: BigNumberish,
    localCurrency_: BigNumberish,
    liquidationLimitPercentage_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeDueLoan(
    hash: BytesLike,
    tokenPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paidInFiat(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paidInToken(
    hash: BytesLike,
    tokenPrice: BigNumberish,
    priceExpiry: BigNumberish,
    bankSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllowedToken(
    token: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyPriceSignature(
    signer: string,
    price: BigNumberish,
    validUntil: BigNumberish,
    timestamp: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DECIMAL_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptLoan(hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    activateLoan(
      hash: BytesLike,
      activatedAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cancelLoan(hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    computeBaseInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeEarlyInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLoan(
      hash: BytesLike,
      collateral_: string,
      beneficiary_: string,
      dueSeconds_: BigNumberish,
      interest_: BigNumberish,
      earlyInterest_: BigNumberish,
      fiatTotal_: BigNumberish,
      tokenTotal_: BigNumberish,
      localCurrency_: BigNumberish,
      liquidationLimitPercentage_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeDueLoan(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(owner: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paidInFiat(hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    paidInToken(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      priceExpiry: BigNumberish,
      bankSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyPriceSignature(
      signer: string,
      price: BigNumberish,
      validUntil: BigNumberish,
      timestamp: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "LoanStatusUpdate(bytes32,uint8)"(
      loanHash?: BytesLike | null,
      status?: BigNumberish | null
    ): LoanStatusUpdateEventFilter;
    LoanStatusUpdate(
      loanHash?: BytesLike | null,
      status?: BigNumberish | null
    ): LoanStatusUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DECIMAL_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptLoan(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateLoan(
      hash: BytesLike,
      activatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelLoan(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeBaseInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeEarlyInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLoan(
      hash: BytesLike,
      collateral_: string,
      beneficiary_: string,
      dueSeconds_: BigNumberish,
      interest_: BigNumberish,
      earlyInterest_: BigNumberish,
      fiatTotal_: BigNumberish,
      tokenTotal_: BigNumberish,
      localCurrency_: BigNumberish,
      liquidationLimitPercentage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeDueLoan(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paidInFiat(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paidInToken(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      priceExpiry: BigNumberish,
      bankSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyPriceSignature(
      signer: string,
      price: BigNumberish,
      validUntil: BigNumberish,
      timestamp: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptLoan(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateLoan(
      hash: BytesLike,
      activatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelLoan(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeBaseInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeEarlyInterest(
      hash: BytesLike,
      atTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLoan(
      hash: BytesLike,
      collateral_: string,
      beneficiary_: string,
      dueSeconds_: BigNumberish,
      interest_: BigNumberish,
      earlyInterest_: BigNumberish,
      fiatTotal_: BigNumberish,
      tokenTotal_: BigNumberish,
      localCurrency_: BigNumberish,
      liquidationLimitPercentage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeDueLoan(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paidInFiat(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paidInToken(
      hash: BytesLike,
      tokenPrice: BigNumberish,
      priceExpiry: BigNumberish,
      bankSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllowedToken(
      token: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyPriceSignature(
      signer: string,
      price: BigNumberish,
      validUntil: BigNumberish,
      timestamp: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
