/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AgrotokenInterface extends utils.Interface {
  functions: {
    "MAX_AGROTOKEN_FEE()": FunctionFragment;
    "addNewGrainContract(string,string,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowed(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "board()": FunctionFragment;
    "calcFees(uint256,uint256)": FunctionFragment;
    "changeFee(uint8,uint256)": FunctionFragment;
    "deTokenizationFee()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "feeDecimals()": FunctionFragment;
    "grains(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isLocked()": FunctionFragment;
    "isTransferValid(address,address,uint256)": FunctionFragment;
    "lockedUntilBlock()": FunctionFragment;
    "name()": FunctionFragment;
    "removeGrainContract(uint256)": FunctionFragment;
    "replaceAdmin(address)": FunctionFragment;
    "setBlockLock(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenizationFee()": FunctionFragment;
    "totalContracts()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFee()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateGrainContract(uint256,string,string,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_AGROTOKEN_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNewGrainContract",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "board", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deTokenizationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTransferValid",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedUntilBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGrainContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenizationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGrainContract",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_AGROTOKEN_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewGrainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "board", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deTokenizationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedUntilBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGrainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenizationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGrainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BlockLockSet(uint256)": EventFragment;
    "Burn(address,uint256,uint256)": EventFragment;
    "FeeHasChanged(uint8,uint256)": EventFragment;
    "GrainStockChanged(uint256,string,string,uint256,uint8,uint256)": EventFragment;
    "Mint(address,uint256,uint256)": EventFragment;
    "NewAdmin(address)": EventFragment;
    "NewManager(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockLockSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeHasChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrainStockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BlockLockSetEvent = TypedEvent<[BigNumber], { _value: BigNumber }>;

export type BlockLockSetEventFilter = TypedEventFilter<BlockLockSetEvent>;

export type BurnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _from: string; _amount: BigNumber; _newTotalSupply: BigNumber }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type FeeHasChangedEvent = TypedEvent<
  [number, BigNumber],
  { _feeType: number; _newAmount: BigNumber }
>;

export type FeeHasChangedEventFilter = TypedEventFilter<FeeHasChangedEvent>;

export type GrainStockChangedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, number, BigNumber],
  {
    contractId: BigNumber;
    grainCategory: string;
    grainContractInfo: string;
    amount: BigNumber;
    status: number;
    newTotalSupplyAmount: BigNumber;
  }
>;

export type GrainStockChangedEventFilter =
  TypedEventFilter<GrainStockChangedEvent>;

export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _to: string; _amount: BigNumber; _newTotalSupply: BigNumber }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type NewAdminEvent = TypedEvent<[string], { _newAdmin: string }>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export type NewManagerEvent = TypedEvent<[string], { _newManager: string }>;

export type NewManagerEventFilter = TypedEventFilter<NewManagerEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Agrotoken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgrotokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_AGROTOKEN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addNewGrainContract(
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    board(overrides?: CallOverrides): Promise<[string]>;

    calcFees(
      _fee: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        serviceAmount: BigNumber;
        netAmount: BigNumber;
      }
    >;

    changeFee(
      _feeType: BigNumberish,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deTokenizationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeDecimals(overrides?: CallOverrides): Promise<[number]>;

    grains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        category: string;
        contractInfo: string;
        amount: BigNumber;
        status: number;
      }
    >;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLocked(overrides?: CallOverrides): Promise<[boolean]>;

    isTransferValid(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockedUntilBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    removeGrainContract(
      _contractIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlockLock(
      _lockedUntilBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenizationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalContracts(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGrainContract(
      _contractIndex: BigNumberish,
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_AGROTOKEN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addNewGrainContract(
    _grainCategory: string,
    _grainContractInfo: string,
    _grainAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  board(overrides?: CallOverrides): Promise<string>;

  calcFees(
    _fee: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { serviceAmount: BigNumber; netAmount: BigNumber }
  >;

  changeFee(
    _feeType: BigNumberish,
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deTokenizationFee(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeDecimals(overrides?: CallOverrides): Promise<number>;

  grains(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number] & {
      category: string;
      contractInfo: string;
      amount: BigNumber;
      status: number;
    }
  >;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLocked(overrides?: CallOverrides): Promise<boolean>;

  isTransferValid(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedUntilBlock(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  removeGrainContract(
    _contractIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlockLock(
    _lockedUntilBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenizationFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalContracts(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGrainContract(
    _contractIndex: BigNumberish,
    _grainCategory: string,
    _grainContractInfo: string,
    _grainAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_AGROTOKEN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addNewGrainContract(
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    board(overrides?: CallOverrides): Promise<string>;

    calcFees(
      _fee: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        serviceAmount: BigNumber;
        netAmount: BigNumber;
      }
    >;

    changeFee(
      _feeType: BigNumberish,
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deTokenizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeDecimals(overrides?: CallOverrides): Promise<number>;

    grains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        category: string;
        contractInfo: string;
        amount: BigNumber;
        status: number;
      }
    >;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    isTransferValid(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedUntilBlock(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    removeGrainContract(
      _contractIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    replaceAdmin(
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBlockLock(
      _lockedUntilBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalContracts(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateGrainContract(
      _contractIndex: BigNumberish,
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BlockLockSet(uint256)"(_value?: null): BlockLockSetEventFilter;
    BlockLockSet(_value?: null): BlockLockSetEventFilter;

    "Burn(address,uint256,uint256)"(
      _from?: string | null,
      _amount?: null,
      _newTotalSupply?: null
    ): BurnEventFilter;
    Burn(
      _from?: string | null,
      _amount?: null,
      _newTotalSupply?: null
    ): BurnEventFilter;

    "FeeHasChanged(uint8,uint256)"(
      _feeType?: null,
      _newAmount?: null
    ): FeeHasChangedEventFilter;
    FeeHasChanged(_feeType?: null, _newAmount?: null): FeeHasChangedEventFilter;

    "GrainStockChanged(uint256,string,string,uint256,uint8,uint256)"(
      contractId?: BigNumberish | null,
      grainCategory?: null,
      grainContractInfo?: null,
      amount?: null,
      status?: null,
      newTotalSupplyAmount?: null
    ): GrainStockChangedEventFilter;
    GrainStockChanged(
      contractId?: BigNumberish | null,
      grainCategory?: null,
      grainContractInfo?: null,
      amount?: null,
      status?: null,
      newTotalSupplyAmount?: null
    ): GrainStockChangedEventFilter;

    "Mint(address,uint256,uint256)"(
      _to?: string | null,
      _amount?: null,
      _newTotalSupply?: null
    ): MintEventFilter;
    Mint(
      _to?: string | null,
      _amount?: null,
      _newTotalSupply?: null
    ): MintEventFilter;

    "NewAdmin(address)"(_newAdmin?: null): NewAdminEventFilter;
    NewAdmin(_newAdmin?: null): NewAdminEventFilter;

    "NewManager(address)"(_newManager?: null): NewManagerEventFilter;
    NewManager(_newManager?: null): NewManagerEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    MAX_AGROTOKEN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addNewGrainContract(
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    board(overrides?: CallOverrides): Promise<BigNumber>;

    calcFees(
      _fee: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFee(
      _feeType: BigNumberish,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deTokenizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    grains(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLocked(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferValid(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedUntilBlock(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    removeGrainContract(
      _contractIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlockLock(
      _lockedUntilBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenizationFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalContracts(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGrainContract(
      _contractIndex: BigNumberish,
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_AGROTOKEN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNewGrainContract(
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    board(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcFees(
      _fee: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFee(
      _feeType: BigNumberish,
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deTokenizationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferValid(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedUntilBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGrainContract(
      _contractIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlockLock(
      _lockedUntilBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenizationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGrainContract(
      _contractIndex: BigNumberish,
      _grainCategory: string,
      _grainContractInfo: string,
      _grainAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
