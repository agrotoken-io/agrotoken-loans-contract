/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AgrotokenLoan, AgrotokenLoanInterface } from "../AgrotokenLoan";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "tokenAlias",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610eaf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318a3d79e1461005c5780638129fc1c1461008c578063b0b22c2c14610096578063e744092e146100b2578063f851a440146100e2575b600080fd5b61007660048036038101906100719190610923565b610100565b6040516100839190610ad0565b60405180910390f35b610094610149565b005b6100b060048036038101906100ab919061096c565b6102cf565b005b6100cc60048036038101906100c791906108f6565b610604565b6040516100d99190610aeb565b60405180910390f35b6100ea610624565b6040516100f79190610ad0565b60405180910390f35b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff166101715760008054906101000a900460ff161561017a565b61017961064a565b5b6101b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b090610bb9565b60405180910390fd5b60008060019054906101000a900460ff161590508015610209576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102ab6040518060400160405280601781526020017f4465706c6f79696e67204167726f746f6b656e4c6f616e000000000000000000815250600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661065b565b80156102cc5760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690610bf9565b60405180910390fd5b6103bd6040518060400160405280600481526020017f4e616d6500000000000000000000000000000000000000000000000000000000815250836002856040516103899190610ab9565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106f7565b6104496040518060400160405280600581526020017f546f6b656e00000000000000000000000000000000000000000000000000000081525082600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610796565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561050d5750600073ffffffffffffffffffffffffffffffffffffffff166002836040516104c69190610ab9565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054390610bd9565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550806002836040516105b49190610ab9565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60016020528060005260406000206000915054906101000a900460ff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061065530610835565b15905090565b6106f38282604051602401610671929190610b06565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610848565b5050565b61079183838360405160240161070f93929190610b74565b6040516020818303038152906040527f95ed0195000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610848565b505050565b6108308383836040516024016107ae93929190610b36565b6040516020818303038152906040527fc91d5ed4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610848565b505050565b600080823b905060008111915050919050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600061088461087f84610c3e565b610c19565b9050828152602081018484840111156108a05761089f610d7b565b5b6108ab848285610cd4565b509392505050565b6000813590506108c281610e62565b92915050565b600082601f8301126108dd576108dc610d76565b5b81356108ed848260208601610871565b91505092915050565b60006020828403121561090c5761090b610d85565b5b600061091a848285016108b3565b91505092915050565b60006020828403121561093957610938610d85565b5b600082013567ffffffffffffffff81111561095757610956610d80565b5b610963848285016108c8565b91505092915050565b6000806040838503121561098357610982610d85565b5b600083013567ffffffffffffffff8111156109a1576109a0610d80565b5b6109ad858286016108c8565b92505060206109be858286016108b3565b9150509250929050565b6109d181610c96565b82525050565b6109e081610ca8565b82525050565b60006109f182610c6f565b6109fb8185610c7a565b9350610a0b818560208601610ce3565b610a1481610d8a565b840191505092915050565b6000610a2a82610c6f565b610a348185610c8b565b9350610a44818560208601610ce3565b80840191505092915050565b6000610a5d602e83610c7a565b9150610a6882610d9b565b604082019050919050565b6000610a80601383610c7a565b9150610a8b82610dea565b602082019050919050565b6000610aa3602483610c7a565b9150610aae82610e13565b604082019050919050565b6000610ac58284610a1f565b915081905092915050565b6000602082019050610ae560008301846109c8565b92915050565b6000602082019050610b0060008301846109d7565b92915050565b60006040820190508181036000830152610b2081856109e6565b9050610b2f60208301846109c8565b9392505050565b60006060820190508181036000830152610b5081866109e6565b9050610b5f60208301856109c8565b610b6c60408301846109d7565b949350505050565b60006060820190508181036000830152610b8e81866109e6565b90508181036020830152610ba281856109e6565b9050610bb160408301846109c8565b949350505050565b60006020820190508181036000830152610bd281610a50565b9050919050565b60006020820190508181036000830152610bf281610a73565b9050919050565b60006020820190508181036000830152610c1281610a96565b9050919050565b6000610c23610c34565b9050610c2f8282610d16565b919050565b6000604051905090565b600067ffffffffffffffff821115610c5957610c58610d47565b5b610c6282610d8a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610ca182610cb4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610d01578082015181840152602081019050610ce6565b83811115610d10576000848401525b50505050565b610d1f82610d8a565b810181811067ffffffffffffffff82111715610d3e57610d3d610d47565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e20616c726561647920616464656400000000000000000000000000600082015250565b7f546f6b656e20616464726573732063616e6e6f74206265207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b610e6b81610c96565b8114610e7657600080fd5b5056fea26469706673582212202c7b8dfc87fd1e5c0298626ead59215050ab21508099ec4f3f3dc6fd1dfffe5964736f6c63430008070033";

type AgrotokenLoanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AgrotokenLoanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AgrotokenLoan__factory extends ContractFactory {
  constructor(...args: AgrotokenLoanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AgrotokenLoan> {
    return super.deploy(overrides || {}) as Promise<AgrotokenLoan>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AgrotokenLoan {
    return super.attach(address) as AgrotokenLoan;
  }
  connect(signer: Signer): AgrotokenLoan__factory {
    return super.connect(signer) as AgrotokenLoan__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AgrotokenLoanInterface {
    return new utils.Interface(_abi) as AgrotokenLoanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AgrotokenLoan {
    return new Contract(address, _abi, signerOrProvider) as AgrotokenLoan;
  }
}
